#!/bin/bash

echo Bauzaun !!!
exit 0

####################################
##	Quick Changes
####################################

default_template=/usr/share/pandoc/data/templates/default.latex
template_dirs="$HOME/.mkpdf /usr/share/pandoc/data/templates"





####################################
##	Functions
####################################

print_help() {
   cat <<EOF

Usage: ${0##*/} <filename> [template]
   Or: ${0##*/} <directory> [template]
   Or: ${0##*/} <option>

Options:
  -c  --clean      Clean up all tmpdirs
  -d  --debug      Print latexmk output
                   Useful, if mkpdf hangs
  -h  --help       Print this help
      --help-toc   Print info on how to
                   use toc-mode

EOF
}


print_help_toc() {
   cat <<EOF

mkpdf toc-mode:

  You may include a 'toc.conf' text
  file in a directory and run mkpdf
  in that directory or with the
  directory as an argument

  This file may include:
    - YAML-style headers to be passed
      on to pandoc
    - A template file to use specified
      as template="template name"
      In case more than one template is
      specified, the first one will be
      used
      The template can be overridden
      from the commandline
      A template may also be included in
      the source file inside a comment
      <!--template="template name"-->
    - Single-line comments starting
      either with '#' or '%'
    - A simple list of files in mark-
      down to be included in the order
      they are specified

EOF
}


fix_template_path() {
# Usage: have template= set; the function will search some
# directories if it is not simply found by the path given

if ! [[ -f $template ]]; then
	dirs=$template_dirs
	for d in $dirs; do
		if [[ -f $d/$template ]]; then
			template=$d/$template
			break
		fi
	done
fi

# Check if file was found
if ! [[ -f $template ]]; then
	echo "ERROR: Template $template not found!"
	echo "       Using default template instead"
	template=$default_template
fi
}


assemble_toc() {
# Description: function will get:
#	- files=...		list of files for pandoc to take as input
#	$tmpdir/head.md		containing metadata from toc.conf

head=$tmpdir/head.md
echo > $head
files=$head
while read line; do
	if [[ $passthrough = 1 ]]; then
		echo $line >> $head
		if [[ $line = --- ]] || [[ $line = ... ]]; then
			echo >> $head
 			unset passthrough
		fi
	elif [[ $ignore = 1 ]]; then
		if [[ $line = '-->' ]]; then
			unset ignore
		fi
	else
		if [[ $line = --- ]]; then
			echo $line >> $head
			passthrough=1
		elif [[ $line = '<!--' ]]; then
			ignore=1
		elif ! [[ $line = "" ]]; then
			files="$files $tocdir/$(echo $line)"
		fi
	fi
done < toc.conf | sed s/'<!--.*-->'//g | sed s/'#.*'//g | sed s/'%.*'//g
}




######################################
##	Main Part
######################################

# set variables [""|1] for all possible options
# set template=... if supplied from the commandline
# for help print help and exit

if [[ $# = 0 ]]; then
	files=$PWD
else
while [[ $1 ]]; do
	if [[ $1 = -h ]] || [[ $1 = --help ]]; then
		print_help
		exit 0
	elif [[ $1 = --help-toc ]]; then
		print_help_toc
		exit 0
	elif [[ $1 = -t ]] || [[ $1 = --template ]]; then
		shift
		template=$1
	elif [[ $1 = --template=* ]]; then
		template="$(echo $1 | sed s/--template=//g)"
	elif [[ $1 = -c ]]; then
		cleanone=1
	elif [[ $1 = -C ]] || [[ $1 = --clean ]]; then
		cleanall=1
	elif [[ $1 = -d ]] || [[ $1 = --debug ]]; then
		debug=1
	else
		files="$files $1"
	fi
	shift
done
fi



# retrieve additional information once input vars are set
# i. e. mode, title, tmpdir and either files or tocdir

if [[ -d $files ]]; then
	mode=toc
	tocdir="$files"
	unset files
	if [[ $(echo $tocdir | rev | cut -c1) = / ]]; then
		title="$(echo $tocdir | rev | cut -d / -f 2 | rev)"
	else
		title="$(echo $tocdir | rev | cut -d / -f 1 | rev)"
	fi
else
	mode=file
	title="$(echo $files | cut -d ' ' -f 1 | rev | cut -d / -f 1 | rev | cut -d . -f 1)"
fi
tmpdir="/tmp/mkpdf/$title"



# Check if all specified input files exist
# Else print error message and exit
# Does not check files specified through toc.conf

if [[ $mode = file ]]; then
	for f in $files; do
	if ! [[ -f $f ]]; then
		echo FATAL: file $f not found.
		exit 1
	fi
	done
elif [[ $mode = toc ]]; then
	if ! [[ -f $tocdir/toc.conf ]]; then
		if [[ $tocdir = "" ]]; then
			echo FATAL: toc.conf not found
			exit 1
		else
			echo FATAL: $tocdir/toc.conf not found
			exit 1
		fi
	fi
fi


! [[ $template ]] && template=$default_template
fix_template_path

# autocleanup if the template changed
templatesum="$(md5sum $template | cut -d ' ' -f 1)"
[[ $(cat $tmpdir/template.md5sum) = $templatesum ]] && cleanone=1


# clean up, as needed
[[ $cleanall = 1 ]] && rm -rf /tmp/mkpdf && echo Successfully removed /tmp/mkpdf
[[ $cleanone = 1 ]] && rm -rf $tmpdir && echo Successfully removed $tmpdir


# Set up tmpdir
! [[ -d $tmpdir ]] && mkdir -p "$tmpdir"
echo $templatesum > $tmpdir/template.md5sum

[[ $mode = toc ]] && assemble_toc


# Get variables for pandoc
[[ cat $template | grep '\documentclass{beamer}' ]] && to=beamer || to=latex

# invoke pandoc
pandoc -f markdown -t $to --file-scope --wrap=preserve --biblatex --template=$template -o $tmpdir/master.tex $files

# furbish output if script exists
[[ $(which furbishtex) ]] && furbishtex $tmpdir/master.tex

latexmk -pdf -output=$tmpdir $tmpdir/master.tex

# Copy pdf to output dir
echo "    Exporting output file"
cp -f $tmpdir/master.pdf $title.pdf












exit 0

#elif [[ $1 = -d ]] || [[ $1 = --debug ]]; then
	ls /tmp/mkpdf | while read var; do
	if [[ "$(cat /tmp/mkpdf/$var/latexmk.log | tail -1 | grep 'Latexmk: All targets' | grep 'are up-to-date')" ]]; then
		echo "/tmp/mkpdf/$var/latexmk.log"
		echo "    is clean (i. e. latexmk finished ok)"
		echo
	else
		cat /tmp/mkpdf/$var/latexmk.log
		echo
		echo -------------------------------
		echo Above is the content of /tmp/mkpdf/$var/latexmk.log
		echo -------------------------------
		read -p "Hit Enter to search for further errors" </dev/tty
		echo
		echo
		echo
