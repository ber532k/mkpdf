#!/bin/bash

function print_help {
	echo
	echo "Usage: mkpdf <filename> [template]"
	echo "   Or: mkpdf <directory> [template]"
	echo "   Or: mkpdf <option>"
	echo
	echo "Options:"
	echo "  -c  --clean      Clean up all tmpdirs"
	echo "  -h  --help       Print this help"
	echo "      --help-toc   Print info on how to"
	echo "                   use toc-mode"
	echo
}
function print_help_toc {
	echo
	echo "mkpdf toc-mode:"
	echo
	echo "  You may include a 'toc.conf' text"
	echo "  file in a directory and run mkpdf"
	echo "  in that directory or with the"
	echo "  directory as an argument"
	echo
	echo "  This file may include:"
	echo "    - YAML-style headers to be passed"
	echo "      on to pandoc"
	echo "    - A template file to use specified"
	echo "      as template=\"template name\""
	echo "      In case more than one template is"
	echo "      specified, the first one will be"
	echo "      used"
	echo "      The template can be overridden"
	echo "      from the commandline"
	echo "      A template may also be included in"
	echo "      the source file inside a comment"
	echo "      '<!--template=\"template name\"-->"
	echo "    - Single-line comments starting"
	echo "      either with '#' or '%'"
	echo "    - A simple list of files in mark-"
	echo "      down to be included in the order"
	echo "      they are specified"
	echo
}
function fix_template_path {
# Usage: have template= set; the function will reset it to an absolute
# path if it is not yet one
#
# Explanation: set a template variable. If this is not an absolute path,
# the current directory and then the pandoc defaults will be searched
# a template containing that name
	if [[ $template ]] && ! [[ $(echo $template | cut -c 1) = / ]]; then

		# fix spaces before template
		template=$(echo $template)
		
		# search for template
		# In current directory:
		if [[ -f $PWD/$template ]]; then
			template=$PWD/$template
		elif [[ -f $PWD/$template.latex ]]; then
			template=$PWD/$template.latex
		elif [[ -f $PWD/$template.beamer ]]; then
			template=$PWD/$template.beamer
		elif [[ -f $PWD/latex.$template ]]; then
			template=$PWD/latex.$template
		elif [[ -f $PWD/beamer.$template ]]; then
			template=$PWD/beamer.$template

		# In pandoc defaults:
		elif [[ -f /usr/share/pandoc/data/templates/$template ]]; then
			template=/usr/share/pandoc/data/templates/$template
		elif [[ -f /usr/share/pandoc/data/templates/default.$template ]]; then
			template=/usr/share/pandoc/data/templates/default.$template
		elif [[ -f /usr/share/pandoc/data/templates/$template.latex ]]; then
			template=/usr/share/pandoc/data/templates/$template.latex
		elif [[ -f /usr/share/pandoc/data/templates/$template.beamer ]]; then
			template=/usr/share/pandoc/data/templates/$template.beamer
		fi

		# Exit on error
		if [[ $template ]] && ! [[ -f $template ]]; then
			echo ERROR: Template file $template not found. >> mkpdf.log
			echo ERROR: Template file $template  not found.
			exit 1
		fi
	fi
}
function toc_assemble {

# Description: function will generate:
#
#	- template=...			(if not yet set)
#	- $filename	(master file)	(containing header from toc.conf and various \input{something}
#	- mkpdf.something.tex		(for each input)


	# (re-)set master file
	echo "<!--mkpdf autogenerated toc_assemble output file-->" > $filename
	echo "<!--$(date)-->" >> $filename
	echo >> $filename

	# Check for template
	if ! [[ $template ]]; then
		if grep "template=" toc.conf &>/dev/null; then
			template="$(grep 'template=' toc.conf | head -1 | cut -d '"' -f 2)"
			fix_template_path
		else
			template=default.latex
			fix_template_path
		fi
	fi

	# read toc.conf line by line
	# Pass header on to master file
	# include parts as \input{something}
	# chnvert parts to something.tex
	while read line; do
	if ! [[ $(echo $line | cut -c 1) = '#' ]] && ! [[ $(echo $line | cut -c 1) = '%' ]] && ! [[ $line = "" ]]; then
		if [[ $passthrough = 1 ]]; then
			echo $line >> $filename
			if [[ $line = --- ]] || [[ $line = ... ]]; then
				echo >> $filename
	 			unset passthrough
			fi
		else
			if [[ $line = --- ]]; then
				echo >> $filename
				echo $line >> $filename
				passthrough=1
			elif ! [[ $(echo $line | grep 'template=') ]]; then
				echo >> $filename
				echo "\\input{mkpdf.$line.tex}" >> $filename
				echo >> $filename
				convert_to_latex part "$line" "mkpdf.$line.tex"
			fi
		fi
	fi
	done < toc.conf
}
function convert_to_latex {

# Usage: convert [full|part] [input] [output]
#    [full|part] specifies if a template is to be used or not
# Note: this function calls furbishtex if it exists

	# Exit on error
	if ! [[ $# = 3 ]]; then
		echo ERROR: convert_to_latex called with wrong number of arguments >> mkpdf.log
		echo ERROR: convert_to_latex called with wrong number of arguments
		exit 1
	elif ! [[ $1 = full ]] && ! [[ $1 = part ]]; then
		echo ERROR: convert_to_latex called with neither full nor part mode >> mkpdf.log
		echo ERROR: convert_to_latex called with neither full nor part mode
		exit 1
	elif ! [[ $template ]]; then
		echo ERROR: convert_to_latex called but no template var set >> mkpdf.log
		echo ERROR: convert_to_latex called but no template var set
		exit 1
	fi

	# check beamer/latex
	if cat $template | grep '\documentclass{beamer}' &>/dev/null; then
		to=beamer
	else
		to=latex
	fi



		# create fake csquotes header for parts
		# set the frame var for pandoc to use
		if [[ $1 = full ]]; then
			frame="--template=$template"
		elif [[ $1 = part ]]; then
		       if grep \usepackage{csquotes} $template &>/dev/null; then
				echo '\usepackage{csquotes}' > mkpdf.fakeframe.latex
				echo '$body$' >> mkpdf.fakeframe.latex
				frame="--template=mkpdf.fakeframe.latex"
			else
				frame=""
			fi
		fi

	# invoke pandoc
	pandoc --wrap=preserve -f markdown -t $to $frame --biblatex $2 -o $3
	
		# strip fake header
		if [[ "$frame" = "--template=mkpdf.fakeframe.latex" ]]; then
			tail -n+2 $3 > $3.nofakeframe
			mv $3.nofakeframe $3
		fi

	# furbish output
	if which furbishtex &>/dev/null; then
		furbishtex $3
	fi
}
function get_input {
# checking input
# has to set one of two modes: toc to read toc.conf from
# directory or file to use one file as input
#
# Will set the following variables:
#
#    name	type or poss. values	condition
#    ------	-------------------	----------
#    mode	[file|toc]
#    template	optional string		processed by fix_template_path
#    doc	path-to-file		only for mode=file
#    path	path-to-directory	only for mode=toc

# OPTIONS:
if [[ $1 = -h ]] || [[ $1 = --help ]]; then
	print_help
	exit 0
elif [[ $1 = -c ]] || [[ $1 = --clean ]]; then
	rm -rfv /tmp/mkpdf
	exit 0
elif [[ $1 = --help-toc ]]; then
	print_help_toc
	exit 0

# REAL INPUT:

# FILE-MODE
elif [[ -f $1 ]]; then
	mode=file
	doc=$1
	template=$2

# TOC-MODE
elif [[ $# = 0 ]]; then
	mode=toc
	path=$(pwd)
elif [[ -d $1 ]]; then
	mode=toc
	path=$1
	template=$2

# ERRORS:
elif [[ $# -gt 2 ]]; then
	echo ERROR: too many arguments.
	exit 1
else
	echo ERROR: Input not understood.
	exit 1
fi
}
function check_file_integrity {
# Check if all files exist
# Else print error message and exit

if [[ $mode = file ]]; then
	if ! [[ -f $doc ]]; then
		echo No such file or directory.
		exit 1
	fi
elif [[ $mode = toc ]]; then
	if ! [[ -f $path/toc.conf ]]; then
		echo $path/toc.conf not found
		exit 1
	fi
else
	echo ERROR: Could not get any mode variable.
	exit 1
fi
}
function process_input {

# Extends the input
# sets the following vars
#
#	name		value					condition
#	-------		---------				--------------
#	dest		output dir eq invoked from
#	filename	name of input file			in file mode
#			name of to-be-generated input file	in toc mode
#	title		title used for output files
#	path		path for input file of toc.conf
#	tmpdir		directory for temporary files
#	template	if in comment in file			only in file mode

	
	dest=$(pwd)
	if [[ $mode = file ]]; then
		[[ $(echo $doc | cut -c 1) = / ]] || doc=$(pwd)/$doc
		filename="$(echo $doc | rev | cut -d / -f 1 | rev)"
		path="$(echo $doc | rev | cut -d / -f 2- | rev)"
		cd $path; path=$(pwd); cd $dest
		title=$(echo $filename | cut -d . -f 1)
		tmpdir="/tmp/mkpdf/$title"
		# Check source file for template
		if ! [[ $template ]] && [[ $(cat $doc | grep '<!--template="') ]]; then
			template="$(cat $doc | grep '<!--template="' | head -1 | cut -d '"' -f 2)"
			fix_template_path
		fi

	elif [[ $mode = toc ]]; then
		cd $path; path=$(pwd); cd $dest
		title="$(echo $path | rev | cut -d / -f 1 | rev)"
		tmpdir="/tmp/mkpdf/$title"
		filename="mkpdf.$title.markdown"
	fi
}




####################################
#	Main Part
####################################

get_input
check_file_integrity
process_input



	# Set up tmpdir
	! [[ -d $tmpdir ]] && mkdir -p "$tmpdir"
	#start/reset log
	echo $(date): running mkpdf > $tmpdir/mkpdf.log
	echo >> $tmpdir/mkpdf.log
	# Refresh links
	cp -rsf $path/* $tmpdir &>> $tmpdir/mkpdf.log


### Changing into tmpdir ###
	cd $tmpdir


# TOC-MODE ASSEMBLE
# already converts all parts
[[ $mode = toc ]] && toc_assemble

# convert master file
convert_to_latex full "$filename" "mkpdf.$title.tex"

	# Exit on error
	if ! [[ -f mkpdf.$title.tex ]]; then
		echo ERROR: pandoc failed to convert $filename
		echo ERROR: pandoc failed to convert $filename >> mkpdf.log
		exit 1
		fi

# convert on to pdf
latexmk -pdf -jobname=$title mkpdf.$title.tex &> latexmk.log

	# Exit on error
	if ! [[ -f $title.pdf ]]; then
		echo ERROR: latexmk failed to generate $title.pdf
		echo ERROR: latexmk failed to generate $title.pdf >> mkpdf.log
		exit 1
		fi

# Copy pdf to output dir
cp $title.pdf $dest &>> mkpdf.log
	echo >> mkpdf.log
	echo Successfully created $title.pdf >> mkpdf.log
