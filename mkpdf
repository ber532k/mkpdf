#!/bin/bash

function print_help {
	echo
	echo "Usage: mkpdf <filename> [template]"
	echo "   Or: mkpdf <directory> [template]"
	echo "   Or: mkpdf <option>"
	echo
	echo "Options:"
	echo "  -c  --clean      Clean up all tmpdirs"
	echo "  -h  --help       Print this help"
	echo "      --help-toc   Print info on how to"
	echo "                   use toc-mode"
	echo
}

function print_help_toc {
	echo
	echo "mkpdf toc-mode:"
	echo
	echo "  You may include a 'toc.conf' text"
	echo "  file in a directory and run mkpdf"
	echo "  in that directory or with the"
	echo "  directory as an argument"
	echo
	echo "  This file may include:"
	echo "    - YAML-style headers to be passed"
	echo "      on to pandoc"
	echo "    - A template file to use marked by"
	echo "      the line starting with ':'"
	echo "      In case more than one template is"
	echo "      specified, the first one will be"
	echo "      used"
	echo "      The template can be overridden"
	echo "      from the commandline"
	echo "      A template may also be included in"
	echo "      the source file inside a comment"
	echo "      '<!--template:[template name]:-->"
	echo "    - Single-line comments starting"
	echo "      either with '#' or '%'"
	echo "    - A simple list of files in mark-"
	echo "      down to be included in the order"
	echo "      they are specified"
	echo
}

function toc_assemble {
	echo "<!--mkpdf autogenerated toc_assemble output file-->" > $filename
	echo "<!--$(date)-->" >> $filename
	echo >> $filename
	
	while read line; do
	if ! [[ $(echo $line | cut -c 1) = '#' ]] && ! [[ $(echo $line | cut -c 1) = '%' ]] && ! [[ $line = "" ]]; then
		if [[ $passthrough = 1 ]]; then
			echo $line >> $filename
			if [[ $line = --- ]]; then
				echo >> $filename
	 			unset passthrough
			fi
		else
			if [[ $line = --- ]]; then
				echo >> $filename
				echo $line >> $filename
				passthrough=1
			elif [[ $(echo $line | cut -c 1) = ':' ]]; then
				if ! [[ $template ]]; then
					template="$(echo $line | cut -c 2-)"
					if ! [[ $(echo $template | cut -c 1) = '/' ]]; then
						template=$path/$(echo $template)
					fi
				fi
			else

				echo >> $filename
				echo "<!--input from $line-->" >> $filename
				echo "\\input{mkpdf.$line.tex}" >> $filename
				echo >> $filename
				convert_to_latex part "$line" "mkpdf.$line.tex"
			fi
		fi
	fi
	done < toc.conf
}

function convert_to_latex {
# Usage: convert [full|part] [input] [output]
#    [full|part] specifies if a template is to be used or not

	# Exit on error
	if ! [[ $# = 3 ]]; then
		echo ERROR: convert_to_latex called with wrong number of arguments >> mkpdf.log
		echo ERROR: convert_to_latex called with wrong number of arguments
		exit 1
	elif ! [[ $1 = full ]] && ! [[ $1 = part ]]; then
		echo ERROR: convert_to_latex called with neither full nor part mode >> mkpdf.log
		echo ERROR: convert_to_latex called with neither full nor part mode
		exit 1
	fi

	# Convert stuff
	if [[ $template ]]; then
		if [[ $(cat mkpdf.template.latex | grep '\documentclass' | grep beamer) ]]; then
			if [[ $1 = full ]]; then
				pandoc -f markdown -t beamer --template=mkpdf.template.latex --biblatex "$2" -o "$3"
			elif [[ $1 = part ]]; then
				pandoc -f markdown -t beamer --biblatex "$2" -o "$3"
			fi
		else
			if [[ $1 = full ]]; then
				pandoc -f markdown -t latex --template=mkpdf.template.latex --biblatex "$2" -o "$3"
			elif [[ $1 = part ]]; then
				pandoc -f markdown -t latex --biblatex "$2" -o "$3"
			fi
		fi
	else
		if [[ $1 = full ]]; then
			pandoc -f markdown -t latex -s --biblatex "$2" -o "$3"
		elif [[ $1 = part ]]; then
			pandoc -f markdown -t latex --biblatex "$2" -o "$3"
		fi
	fi

}


# checking input
# has to set one of two modes: toc to read toc.conf from
# directory or file to use one file as input

# OPTIONS:
if [[ $1 = -h ]] || [[ $1 = --help ]]; then
	print_help
	exit 0
elif [[ $1 = -c ]] || [[ $1 = --clean ]]; then
	rm -rfv /tmp/mkpdf
	exit 0
elif [[ $1 = --help-toc ]]; then
	print_help_toc
	exit 0

# REAL INPUT:

# FILE-MODE
elif [[ -f $1 ]]; then
	mode=file
	doc=$1
	template=$2

# TOC-MODE
elif [[ $# = 0 ]]; then
	mode=toc
	path=$(pwd)
elif [[ -d $1 ]]; then
	mode=toc
	path=$1
	template=$2

# ERRORS:
elif [[ $# -gt 2 ]]; then
	echo ERROR: too many arguments.
	exit 1
elif [[ $# = 1 ]] && ! [[ -f $1 ]] && ! [[ -d $1 ]]; then
	echo ERROR: $1 is neither file nor directory.
	exit 1
elif [[ $# = 2 ]] && ! [[ -f $2 ]] && ! [[ -d $2 ]]; then
	echo ERROR: $2 is neither file nor directory.
	exit 1
else
	echo Error processing input.
	exit 1
fi

# Check if all files exist
if [[ $mode = file ]]; then
	if ! [[ -f $doc ]]; then
		echo No such file or directory.
		exit 1
	elif [[ $template ]] && ! [[ -f $template ]]; then
		if [[ -f /usr/share/pandoc/data/templates/$template ]]; then
			template=/usr/share/pandoc/data/templates/$template
		elif [[ -f /usr/share/pandoc/data/templates/default.$template ]]; then
			template=/usr/share/pandoc/data/templates/default.$template
		else
			echo Template file not found.
			exit 1
		fi
	fi
elif [[ $mode = toc ]]; then
	if ! [[ -f $path/toc.conf ]]; then
		echo $path/toc.conf not found
		exit 1
	fi
else
	echo ERROR: Could not get any mode variable.
	exit 1
fi

####################################
#	Main Part
####################################
#
# If everything went well up to this
# point, now's what really happens.
#
# Make sure every other thing exits
# so that it doesn't reach this
# point
#

	# Get input and environment
	dest=$(pwd)
	if [[ $mode = file ]]; then
		[[ $(echo $doc | cut -c 1) = / ]] || doc=$(pwd)/$doc
		filename="$(echo $doc | rev | cut -d / -f 1 | rev)"
		path="$(echo $doc | rev | cut -d / -f 2- | rev)"
		cd $path; path=$(pwd); cd $dest
		title=$(echo $filename | cut -d . -f 1)
		tmpdir="/tmp/mkpdf/$title"
		# Check source file for template
		if ! [[ $template ]] && [[ $(cat $doc | grep '<!--template:') ]]; then
			template="$(cat $doc | grep '<!--template:' | head -1 | cut -d : -f 2)"
			# ON BROKEN LINK
			if ! [[ -f $path/$template ]]; then
				echo ERROR: broken link
				echo "   '$filename' specifies '$template' as"
				echo "   template; This file does not seem to exist!"
				exit 1
				fi
		fi

	elif [[ $mode = toc ]]; then
		cd $path; path=$(pwd); cd $dest
		title="$(echo $path | rev | cut -d / -f 1 | rev)"
		tmpdir="/tmp/mkpdf/$title"
		filename="mkpdf.$title.markdown"
	fi
	# Fix template path
	if [[ $template ]] && ! [[ $(echo $template | cut -c 1) = / ]]; then
		template=$(pwd)/$(echo $template)
	fi

	# Set up tmpdir
	! [[ -d $tmpdir ]] && mkdir -p "$tmpdir"
	
	#start/reset log
	echo $(date): running mkpdf > $tmpdir/mkpdf.log
	echo >> $tmpdir/mkpdf.log

	# Refresh links
	cp -rsf $path/* $tmpdir &>> $tmpdir/mkpdf.log

# Changing into tmpdir
cd $tmpdir
	
	# TOC-MODE ASSEMBLE
	[[ $mode = toc ]] && toc_assemble
	
	# copy template
	ln -rsf $template $tmpdir/mkpdf.template.latex

	# convert master file
	convert_to_latex full "$filename" "mkpdf.$title.tex"

	# Exit on error
	if ! [[ -f mkpdf.$title.tex ]]; then
		echo ERROR: pandoc failed to convert $filename
		echo ERROR: pandoc failed to convert $filename >> mkpdf.log
		exit 1
		fi

	latexmk -pdf -jobname=$title mkpdf.$title.tex &> latexmk.log

	# Exit on error
	if ! [[ -f $title.pdf ]]; then
		echo ERROR: latexmk failed to generate $title.pdf
		echo ERROR: latexmk failed to generate $title.pdf >> mkpdf.log
		exit 1
		fi

	# Copy pdf to output dir
	cp $title.pdf $dest &>> mkpdf.log
	echo >> mkpdf.log
	echo Successfully created $title.pdf >> mkpdf.log
