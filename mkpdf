#!/bin/bash

####################################
##	Quick Changes
####################################

default_template=/usr/share/pandoc/data/templates/default.latex
template_dirs="$HOME/.mkpdf /usr/share/pandoc/data/templates"



####################################
##	License
####################################
#  This program is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program.  If not, see <http://www.gnu.org/licenses/>.


####################################
##	Output and log
####################################

print() {
	echo "    $@"
	logonly "$@"
}

log() {
	logonly $@
	[[ $debug = 1 ]] && echo "$@"
}

logonly() {
	echo -e "$(date +"%y-%m-%d %H:%M")\t$@" >> $tmpdir/mkpdf.log
}

reset_log() {
	rm -f $tmpdir/mkpdf.log
	rm -f $tmpdir/latexmk.log
}


####################################
##	Help Functions
####################################

print_help() {
   cat <<EOF

Usage: mkpdf [options] <directory>
   Or: mkpdf [options] [files]

Options:
  -c  --clean           Remove all temporary files and exit
  -d  --debug           Print latexmk's output
  -f  --fresh           Remove auxiliary files before running
                        latexmk
  -p  --preview         Open pdf once generated
  -t  --template        Specify a template to use with pandoc.
  -h  --help            Print this help and exit
      --help-toc        Print info on how to use toc-mode
      --basic-toc       Print an example of a basic toc.conf
      --advanced-toc    Print an advanced example for toc.conf

EOF
}

print_help_toc() {
   cat <<EOF

mkpdf toc-mode:

  You may include a 'toc.conf' text file in a directory
  and run mkpdf in that directory or with the directory
  as an argument.

  toc.conf syntax:
    - Empty lines will be ignored
    - Comments will also be ignored:
        * Bash-style comments starting with #
        * Latex-style comments starting with %
        * HTML-style comments (either single- or multi-
          line)
    - A template may be specified in any comment
      containing template="FILE". This comment should
      not contain anything else.
    - YAML-style headers will be passed on to pandoc
      and thus used directly in creating the output.
    - The remaining lines will be interpreted as paths
      pointing to markdown files to be included in the
      output in the same order they are specified.

EOF
}

print_basic_toc() {
   cat <<EOF
intro.txt
ch1.txt
ch2.txt
EOF
}

print_advanced_toc() {
   cat <<EOF
---
title: Some example document
author: Max Mustermann
...

# Introduction
intro-p1.txt
intro-p2.txt
	intro-p3.txt # Indent doesn't make a difference

---
date: 01/01/2017
---

<!--
ToDo:
  - actually write the chapters
  - think of a better title
-->

# First Chapter
ch1.txt # what an unimaginative title

% Second Chapter
../my_other_stuff/ch2.txt % note that relative paths may be used
	% those relative paths will be relative to the location of toc.conf

<!--btw: this is an example toc.conf file-->

EOF
}


####################################
##	Other Functions
####################################

debug_log_loop() {
while true; do
	ls /tmp/mkpdf | while read var; do
	if [[ "$(cat /tmp/mkpdf/$var/latexmk.log | tail -1 | grep 'Latexmk: All targets' | grep 'are up-to-date')" ]]; then
		echo "/tmp/mkpdf/$var/latexmk.log"
		echo "    is clean (i. e. latexmk finished ok)"
		echo
	else
		cat /tmp/mkpdf/$var/latexmk.log
		echo
		echo -------------------------------
		echo Above is the content of /tmp/mkpdf/$var/latexmk.log
		echo -------------------------------
		read -p "Hit Enter to search for further errors" </dev/tty
		echo
		echo
		echo
	fi
	done
	echo
	echo     ______________________
	read -p "Hit Enter to run again" </dev/tty
	echo
	echo
	echo
done
}

fix_template_path() {
# Usage: have template= set; the function will search some
# directories if it is not simply found by the path given

if ! [[ -f $template ]]; then
	dirs=$template_dirs
	for d in $dirs; do
		if [[ -f $d/$template ]]; then
			template=$d/$template
			break
		fi
	done
fi

# Check if file was found
if ! [[ -f $template ]]; then
	print "ERROR: Template $template not found!"
	print "       Using default template instead"
	template=$default_template
fi
}

assemble_toc() {
# Description: function will get:
#	- files=...		list of files for pandoc to take as input
#	$tmpdir/head.md		containing metadata from toc.conf

print "Reading toc.conf"

head=$tmpdir/head.md
[[ -f $head ]] && rm $head
unset files
while read line; do
	if [[ $passthrough = 1 ]]; then
		echo $line >> $head
		if [[ $line = --- ]] || [[ $line = ... ]]; then
			echo >> $head
 			unset passthrough
		fi
	elif [[ $ignore = 1 ]]; then
		if [[ $line = '-->' ]]; then
			unset ignore
		fi
	else
		if [[ $line = --- ]]; then
			echo $line >> $head
			passthrough=1
		elif [[ $line = '<!--' ]]; then
			ignore=1
		elif [[ $line ]]; then
			files="$files $tocdir/$(echo $line)"
		fi
	fi
done < <(cat toc.conf | sed s/'<!--.*-->'//g | sed s/'#.*'//g | sed s/'%.*'//g)
[[ -f $head ]] && files="$head $files"
}

clean_all() {
	if [[ -d /tmp/mkpdf ]]; then
		rm -r /tmp/mkpdf && echo Successfully removed all tmpfiles
	else
		echo No files left to remove
	fi
}




################################################
##	Processing Input
################################################
#
# Only set variables
# Do not write to disk in this part
#

# unset variables (just in case)
unset template
unset cleanone
unset debug
unset files
unset mode
unset tocdir
unset title
unset tmpdir
unset preview

################
# Get Input
################
# set variables [""|1] for all possible options
# set template=... if supplied from the commandline
# for help print help and exit

while [[ $1 ]]; do
	if [[ $1 = -h ]] || [[ $1 = --help ]]; then
		print_help
		exit 0
	elif [[ $1 = --help-toc ]]; then
		print_help_toc
		exit 0
	elif [[ $1 = --basic-toc ]]; then
		print_basic_toc
		exit 0
	elif [[ $1 = --advanced-toc ]]; then
		print_advanced_toc
		exit 0
	elif [[ $1 = -t ]] || [[ $1 = --template ]]; then
		shift
		template=$1
	elif [[ $1 = --template=* ]]; then
		template="$(echo $1 | sed s/--template=//g)"
	elif [[ $1 = -f ]] || [[ $1 = --fresh ]]; then
		cleanone=1
	elif [[ $1 = -c ]] || [[ $1 = --clean ]]; then
		clean_all
		exit 0
	elif [[ $1 = -d ]] || [[ $1 = --debug ]]; then
		debug=1
	elif [[ $1 = -p ]] || [[ $1 = --preview ]]; then
		preview=1
	else
		[[ $files ]] &&	files="$files $1" || files="$1"
	fi
	shift
done

################
# Get mode
################
if ! [[ $files ]]; then
	if ! [[ $debug = 1 ]] && [[ -f toc.conf ]]; then
		mode=toc
		tocdir=$PWD
	else
		mode=empty
	fi
elif [[ $files = '.' ]]; then
	mode=toc
	tocdir=$PWD
elif [[ -d $files ]]; then
	mode=toc
	tocdir="$files"
	unset files
else
	mode=file
fi

################
# Get title
################
if [[ $mode = toc ]]; then
	if [[ $(echo $tocdir | rev | cut -c1) = / ]]; then
		title="$(echo $tocdir | rev | cut -d / -f 2 | rev)"
	else
		title="$(echo $tocdir | rev | cut -d / -f 1 | rev)"
	fi
elif [[ $mode = file ]]; then
	title="$(echo $files | cut -d ' ' -f 1 | rev | cut -d / -f 1 | rev | cut -d . -f 1)"
fi
tmpdir="/tmp/mkpdf/$title"


#################################################
##	Executing commands
#################################################

###############
# Reset
###############
! [[ -d $tmpdir ]] && mkdir -p $tmpdir
reset_log

###############
# Mode empty
###############
if [[ $mode = empty ]]; then
	if [[ $debug = 1 ]]; then
		debug_log_loop
	else
		print_help
	fi
	exit 0
fi


###############
# TOC-Preparations
###############

# Error or assemble
if [[ $mode = toc ]]; then
	if ! [[ -f $tocdir/toc.conf ]]; then
		print FATAL: $tocdir/toc.conf not found
		exit 1
	fi
	assemble_toc
fi

#################
# Check files exist
#################

for f in $files; do
	if ! [[ -f $f ]]; then
		print FATAL: file $f not found.
		exit 1
	fi
done


#################
# Get template
#################

# check in toc.conf
if ! [[ $template ]] && [[ $mode = toc ]]; then
	template="$(cat $tocdir/toc.conf | grep template= | grep -e '[%|#|<!]' | head -1 | sed 's/[%|#| |"]//g' | sed 's/<!--//g' | sed 's/-->//g' | sed 's/template=//g')"
fi

# check in files
if ! [[ $template ]]; then
	template="$(cat $files | grep template= | head -1 | grep '<!--' | sed 's/<!--//g' | sed 's/-->//g' | sed 's/[ |"]//g' | sed 's/template=//g')"
fi

# else use default
! [[ $template ]] && template=$default_template

# fix path
fix_template_path


#################
# Pandoc
#################

# Get variables
[[ $(cat $template | grep '\documentclass{beamer}') ]] && to=beamer || to=latex

# invoke pandoc
print Converting files to latex
pandoc -f markdown -t $to --file-scope --wrap=preserve --biblatex --template=$template -o $tmpdir/master.tex $files

# Exit on error
if ! [[ -f $tmpdir/master.tex ]]; then
	print FATAL: pandoc failed to generate master.tex
	exit 1
fi


##################
# Furbishtex
##################
[[ $(which furbishtex) ]] && furbishtex $tmpdir/master.tex


##################
# Latexmk
##################

# autocleanup if the template changed or -c option was
# specified resulting in cleanone=1
templatesum="$(md5sum $template | cut -d ' ' -f 1)"
[[ -f $tmpdir/template.md5sum ]] && [[ $(cat $tmpdir/template.md5sum) = $templatesum ]] || cleanone=1
echo $templatesum > $tmpdir/template.md5sum
if [[ $cleanone = 1 ]]; then
	print Removing old tmpfiles
	rm -rf $tmpdir/latexmk
fi

# Set up latexmk tmpdir
! [[ -d $tmpdir/latexmk ]] && mkdir "$tmpdir/latexmk"


print Running latexmk
if [[ $debug = 1 ]]; then
	latexmk -pdf -outdir=$tmpdir/latexmk $tmpdir/master.tex
else
	latexmk -pdf -outdir=$tmpdir/latexmk $tmpdir/master.tex &>> $tmpdir/latexmk.log
fi

# Exit on error
if ! [[ -f $tmpdir/latexmk/master.pdf ]]; then
	print FATAL: Latexmk failed to generate pdf file
	exit 1
fi


#################
# Finish up
#################
print "Exporting output: $title.pdf"
cp -f $tmpdir/latexmk/master.pdf $title.pdf

[[ $preview = 1 ]] && exo-open $title.pdf
