#!/bin/dash

####################################
##	License
####################################
#  This program is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program.  If not, see <http://www.gnu.org/licenses/>.

####################################
##	Major Functions
####################################

print_help() {
cat <<EOF
Usage: mkpdf [options] <directory>
   Or: mkpdf [options] [files]

Options:
  -c  --clean           If invoked as the only option, remove all
                        temporary files. If invoked among other
                        options, remove relevant temporary files
                        for a specific run.
  -d  --debug           Do not hide latexmk's output
  -o  --output          Specify a name for the output file
  -p  --preview         Open pdf once generated
  -t  --template        Specify a template to use with pandoc
  -h  --help            Print this help message and exit

Pandoc-Options:
  -M  --metadata        These options will be passed on to pandoc.
                        Please refer to pandoc's documentation for
                        further information on what they do.

Specifying templates:
      If no template is set from the command line, mkpdf will check
      either toc.conf or the input files if any of them specify a
      variable like 'template: default.latex'. While this is also
      a usual (though probably not processed) variable for pandoc,
      mkpdf will use it to determine what template to use.

EOF
}

clean_all() {
    if test -d /tmp/mkpdf; then
        rm -r /tmp/mkpdf && echo "    Successfully removed all temporary files"
    else
        echo "    No files left to remove"
    fi
}

debug_log_loop() {
    while true; do
        find /tmp/mkpdf | grep latexmk.log | while read logfile; do
        if test "$(cat $logfile | tail -1 | grep 'Latexmk: All targets' | grep 'are up-to-date')"; then
            echo "$logfile"
            echo "    is clean (i. e. latexmk finished ok)"
            echo
        else
            cat $logfile
            echo
            echo -------------------------------
            echo Above is the content of $logfile
            echo -------------------------------
            read -p "Hit Enter to search for further errors" x </dev/tty
            echo
            echo
            echo
        fi
        done
        echo
        echo     ______________________
        read -p "Hit Enter to run again" x </dev/tty
        echo
        echo
        echo
    done
}

check_filenames() {
    # Input:    list of filenames as $1, $2, ...
    # Output:   None, but files will be appended to $filenames if they exist
    while test $# -gt 0; do
        if test -f "$1"; then
            filenames="$filenames '$1'"
            shift
        else
            echo File not found: $1 >&2
            exit 1
        fi
    done
}

parse_commandline() {
    get_codename() {
        codename="$(echo $1 | rev | cut -d '/' -f 1 | rev | cut -d '.' -f 1 |
                        sed 's/^ *//g' | sed 's/ *$//g' | tr ' ' '_')"
    }
    preprocess_commandline() {
        longopts=help,clean,debug,output:,preview,template:,metadata:
        shortopts=hcdo:pt:M:
        getopt -o $shortopts -l $longopts -- "$@"
    }
    interpret_commandline() {
        if test $# = 2; then        # Partial runs for specific single options
            case "$1" in
                -c | --clean )
                    clean_all
                    exit 0  ;;
                -d | --debug )
                    debug_log_loop
                    exit 0  ;;
            esac
        fi
        while true; do              # Main options
            case "$1" in
                # Proper Options
                -h | --help )
                    print_help
                    exit 0  ;;
                -c | --clean )
                    clean=1
                    shift   ;;
                -d | --debug )
                    debug=1
                    shift   ;;
                -o | --output )
                    output="'$2'"
                    shift 2 ;;
                -p | --preview )
                    preview=1
                    shift   ;;
                -t | --template )
                    template="'$2'"
                    shift 2 ;;
                # Pandoc-Options
                -M | --metadata )
                    PANDOC_OPTIONS="$PANDOC_OPTIONS $1 '$2'"
                    shift 2 ;;
                # Concluding remarks
                -- )
                    shift; break;;
                * )
                    echo Errors occured while parsing commandline options
                    echo Remaining arguments: $@
                    exit 1  ;;
            esac
        done
        if test $# = 0; then                    # exit if nothing else to do
            echo Missing argument: No files or directory specified >&2
            exit 1
        elif test -d "$1"; then                 # Else Parse dir- or filenames
            mode=dir
            tocdir="$1"
            shift
            if test $# -gt 0; then
                echo mkpdf can only take one argument in directory mode >&2
                exit 1
            fi
            get_codename "$(realpath "$tocdir")"
        elif test -f "$1"; then
            mode=files
            check_filenames "$@"
            eval get_codename $filenames
        else
            echo No such file or directory: $1 >&2
            exit 1
        fi
    }
    # eval to have args accessible as $1, $2 ...
    eval interpret_commandline $(preprocess_commandline "$@")
}

read_toc() {
    # Input:  $1:   runmode (files, meta)
    #         $2:   toc-filename
    # Output:   string (of files or YAML-metadata)
    test $1 = meta && echo ---
    if test $1 = meta; then
        cat_toc() {
            cat "$1"    # Do not strip comments
        }
        OLDIFS="$IFS"
        IFS=""      # Make sure whitespace is preserved by read
    else
        cat_toc() {
            cat "$1" | sed 's/#.*//g'   # Strip comments
        }
    fi
    cat_toc "$2" | while read line; do
        if test "$yaml_block" = 1; then
            if test "$line" = "---" || test "$line" = "..."; then
                 unset yaml_block
            else
                # This line contains metadata
                test $1 = meta && echo "$line"
            fi
        else
            if test "$line" = "---"; then
                yaml_block=1
            elif test "$line"; then
                # The line contains a filename
                test $1 = files && echo -n "'$line' "
            fi
        fi
    done
    test $1 = meta && echo ---
    test $1 = meta && IFS="$OLDIFS"
}

####################################
##	Main Part
####################################

parse_commandline "$@"
if test $mode = dir; then
    if test -f "$tocdir/toc.conf"; then
        origin="$PWD"
        cd "$tocdir"
        eval check_filenames "$(read_toc 'files' 'toc.conf')"
    else
        echo There is no toc.conf in $tocdir >&2
        exit 1
    fi
fi


# Remaining:
#   - set up tempdir
#   - extract metadata from toc.conf (if in dir mode)
#   - get template if not already set (use pandoc to look for template metafield)
#       - maybe fallback to custom default
#       - have pandoc print the template to verify it exists
#   - run pandoc
#   - run latexmk
#   - copy output to $origin/$output (or just $output in file mode)

####################################
##	Testing Stuff
####################################

echo tocdir = $tocdir
echo filenames = $filenames
echo codename = $codename
echo template = $template
echo preview = $preview
echo debug = $debug
echo output = $output
echo PANDOC_OPTIONS = $PANDOC_OPTIONS
if test $mode = dir; then
    echo
    echo Metadata from toc:
    read_toc 'meta' 'toc.conf'
fi


#eval pandoc -t latex --template="$template" $filenames
